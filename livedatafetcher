import pandas as pd
import numpy as np
import yfinance as yf
import statsmodels.api as sm
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
import datetime

plt.style.use('ggplot')
%matplotlib inline

# date range
start_date = "2010-01-01"
end_date = datetime.datetime.today().strftime("%Y-%m-%d")

# live data download
sp_data = yf.download("^GSPC", start=start_date, end=end_date, auto_adjust=False)
tip_data = yf.download("TIP", start=start_date, end=end_date, auto_adjust=True)
tnx_data = yf.download("^TNX", start=start_date, end=end_date, auto_adjust=False)

# resample monthly, compute returns/changes
sp_monthly = sp_data['Adj Close'].resample('M').last()
sp_returns = sp_monthly.pct_change().dropna()

tip_monthly = tip_data['Close'].resample('M').last()
tip_returns = tip_monthly.pct_change().dropna()

tnx_monthly = tnx_data['Close'].resample('M').last()
tnx_change = tnx_monthly.diff().dropna()

# combine into one dataframe
data = pd.concat([sp_returns, tip_returns, tnx_change], axis=1).dropna()
data.columns = ['SP500', 'InflationProxy', 'InterestProxy']

# add lagged variables
data['InflationProxy_Lag1'] = data['InflationProxy'].shift(1)
data['InterestProxy_Lag1'] = data['InterestProxy'].shift(1)
data = data.dropna()

# quality check
print(data.tail())

# predictors
predictor_cols = ["InflationProxy", "InterestProxy",
                  "InflationProxy_Lag1", "InterestProxy_Lag1"]

scaler = StandardScaler()
X_scaled = scaler.fit_transform(data[predictor_cols])
X = sm.add_constant(X_scaled)
y = data["SP500"]

# to run regression
model = sm.OLS(y, X).fit()
print(model.summary())

# save predicted returns via
data["Predicted"] = model.predict(X)

window = 12
rolling_coefs = pd.DataFrame(index=data.index[window-1:], columns=predictor_cols)

for i in range(window-1, len(data)):
    X_win = data[predictor_cols].iloc[i-window+1:i+1]
    y_win = data['SP500'].iloc[i-window+1:i+1]
    X_scaled_win = scaler.fit_transform(X_win)
    X_win_const = sm.add_constant(X_scaled_win)
    model_win = sm.OLS(y_win, X_win_const).fit()
    rolling_coefs.iloc[i-window+1] = model_win.params[1:]  # skip constant

rolling_coefs = rolling_coefs.astype(float)
rolling_coefs.plot(figsize=(12,5))
plt.title("Rolling 12-Month Coefficients")
plt.ylabel("Effect on Monthly SP500 Return")
plt.show()

# signals generated by
data['Signal'] = (data['Predicted'] > 0).astype(int)
data['Strategy_Return'] = data['Signal'] * data['SP500']

# calc of cumul returns
data['Cumulative_SP500'] = (1 + data['SP500']).cumprod()
data['Cumulative_Strategy'] = (1 + data['Strategy_Return']).cumprod()

# plotting cumulative growth
plt.figure(figsize=(12,5))
plt.plot(data.index, data['Cumulative_SP500'], label='SP500 Buy & Hold')
plt.plot(data.index, data['Cumulative_Strategy'], label='Predicted-Return Strategy')
plt.title("Cumulative Returns")
plt.ylabel("Cumulative Growth")
plt.legend()
plt.show()

